@page "/player-edit"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject PlayerService playerService
@inject TeamService teamService

<h1>Edit</h1>

<h4>Player</h4>
<hr />
<EditForm Model="@formPlayer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" bind="@formPlayer.PlayerId" />

    <div class="form-group">
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="@formPlayer.FirstName" class="form-control" />
        <ValidationMessage For="@(() => formPlayer.FirstName)" />
    </div>

    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="@formPlayer.LastName" class="form-control" />
        <ValidationMessage For="@(() => formPlayer.LastName)" />
    </div>

    <div class="form-group">
        <label for="Position">Position</label>
        <InputText id="Position" @bind-Value="@formPlayer.Position" class="form-control" />
        <ValidationMessage For="@(() => formPlayer.Position)" />
    </div>

    <div class="form-group">
        <label for="JerseyNumber">Jersey Number</label>
        <InputNumber id="JerseyNumber" @bind-Value="@formPlayer.JerseyNumber" class="form-control" />
        <ValidationMessage For="@(() => formPlayer.JerseyNumber)" />
    </div>
    
    <div class="form-group">
        <label for="TeamName">Team Name</label>
        <InputSelect id="TeamName" @bind-Value="@formPlayer.TeamName" class="form-control">
            <option value="">Select Team</option>
            @foreach (var team in teams)
            {
                <option value="@team.TeamName">@team.TeamName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => formPlayer.TeamName)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

<NavLink class="btn btn-primary" href="Players">Back To List</NavLink>

@code {
    [Parameter]
    public int playerId { get; set; } = 0;

    Player formPlayer = new Player();
    List<Team> teams = new List<Team>();
    // Example method to handle form submission
    private async void HandleValidSubmit()
    {
        await playerService.UpdatePlayerAsync(formPlayer.PlayerId, formPlayer);
        NavigationManager.NavigateTo("/players");
    }

    protected override async void OnInitialized()
    {
        formPlayer = await playerService.GetPlayerByIdAsync(playerId);
        if (formPlayer == null)
        {
            formPlayer = new Player();
        }
        teams = await teamService.GetTeamsAsync();
    }
}
